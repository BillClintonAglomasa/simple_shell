#include "shell.h"File Edit Options Buffers Tools C Help                                         
        char *delimiter = " \n";
	int i;
        char *argv[] = NULL;

        token = strtok(*read_line, delimiter);

        if (token == NULL)
        {
                perror("Unable to read sentence or done reading");
	}

        i = 0;

        while (token != NULL)
        {
                token = strtok(NULL, delimiter);
		argv[i] = token;
                i++;
	}
        argv[i] = NULL;

        return (argv);
}

/**
 * _return_tokens - Breaks a sentence using a delimiter
 *
 * @read_line: A line to be tokenize or broken into words
 *
 * Return: A pointer to an array of tokens
 */

char *_return_tokens(char *read_line)
{
	char *token = NULL;
	char *delimiter = " \n";
	int i;
File Edit Options Buffers Tools C Help                                         
        char *delimiter = " \n";
	int i;
        char *argv[] = NULL;

        token = strtok(*read_line, delimiter);

        if (token == NULL)
        {
                perror("Unable to read sentence or done reading");
	}

        i = 0;

        while (token != NULL)
        {
                token = strtok(NULL, delimiter);
		argv[i] = token;
                i++;
	}
        argv[i] = NULL;

        return (argv);
}	char *argv[] = NULL;

	argv = malloc(sizeof(*argv[]) * (_strlength(read_line) + 1));

	if (argv == NULL)
	{
		free(read_line);
		perror("Memory allocation failed");
		exit(EXIT_FAILURE);
	}

	token = strtok(*read_line, delimiter);

	if (token == NULL)
	{
		free(read_line);
		free(argv);
		perror("Unable to generate token");
		exit(EXIT_FAILURE);
	}

	i = 0;

	while (token != NULL)
	{
		token = strtok(NULL, delimiter);
		argv[i] = token;
		i++;
	}
	argv[i] = NULL;

	return (argv);
}
